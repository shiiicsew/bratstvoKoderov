Этот код выведет в консоль 4 строки, каждая из которых будет содержать Bad: undefined.
Причина в том, что переменная i, объявленная с помощью var, сохраняет своё значение после завершения цикла. 
Когда функция setTimeout выполняется через 3 секунды, значение i равно длине массива (4), что выходит за пределы массива arr, и поэтому arr[i] возвращает undefined.

Решение:

1 вариант
const arr = [10, 12, 15, 21];

for (let i = 0; i < arr.length; i++) {
    setTimeout(function() {
        console.log(arr[i] > 13 ? `Good: ${arr[i]}` : `Bad: ${arr[i]}`);
    }, 3000);
}

Я заменил var на let при объявлении переменной i. 
let создает новую область видимости для каждой итерации цикла, что позволяет функции правильно ссылаться на текущее значение i.

2 вариант
Можно использовать функцию-обёртку, где функция принимает индекс в качестве аргумента, так мы сохраняем текущее значение индекса для каждой итерации.

const arr = [10, 12, 15, 21];

for (var i = 0; i < arr.length; i++) {
    (function(index) {
        setTimeout(function() {
            console.log(arr[index] > 13 ? `Good: ${arr[index]}` : `Bad: ${arr[index]}`);
        }, 3000);
    })(i);
}

Вывод:
Bad: 10
Bad: 12
Good: 15
Good: 21
